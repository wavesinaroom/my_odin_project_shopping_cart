import React from 'react';
<<<<<<< HEAD
import { render, cleanup,screen, fireEvent} from '@testing-library/react';
||||||| 318ac63e
import { render, cleanup,screen,  waitFor, fireEvent} from '@testing-library/react';
=======
import { render, cleanup,screen,  fireEvent} from '@testing-library/react';
>>>>>>> ea4ca75a693b1d3b4b9d2f8ab08ae084623573b4
import '@testing-library/jest-dom'
import ItemPanel from './itemPanel';


afterEach(cleanup);
<<<<<<< HEAD
const item = {pic: `a pic`, title:`a title`, description:`a description`}
||||||| 318ac63e
const details = {pic: `a pic`, title:`a title`, description:`a description`}
=======
const itemMock = {pic: `a pic`, title:`a title`, description:`a description`}
>>>>>>> ea4ca75a693b1d3b4b9d2f8ab08ae084623573b4
const setMock = jest.fn();
const clickOutMock = jest.fn();

it(`renders content`,()=>{

<<<<<<< HEAD
  render(
      <ItemPanel item={item} addCart={setMock}/>
    );
||||||| 318ac63e
  render(
    <MemoryRouter>
      <ItemPanel info={details} setCart={setMock}/>;
    </MemoryRouter>);
=======
  render(<ItemPanel item={itemMock} setCart={setMock} isModalOpen={true} setIsModalOpen={clickOutMock} />);
>>>>>>> ea4ca75a693b1d3b4b9d2f8ab08ae084623573b4

<<<<<<< HEAD
  const image = screen.getByAltText(`${item.title}`);
  expect(image).toBeInTheDocument();
  expect(image).toHaveAttribute(`src`,`${item.pic}`);
  expect(screen.getByRole(`heading`,`${item.title}`)).toBeInTheDocument();
  expect(screen.getByText(`${item.description}`)).toBeInTheDocument();
||||||| 318ac63e
  const image = screen.getByAltText(`${details.title}`);
  expect(image).toBeInTheDocument();
  expect(image).toHaveAttribute(`src`,`${details.pic}`);
  expect(screen.getByRole(`heading`,`${details.title}`)).toBeInTheDocument();
  expect(screen.getByText(`${details.description}`)).toBeInTheDocument();
=======
  expect(screen.getByAltText(`${itemMock.title}`)).toBeInTheDocument();
  expect(screen.getByAltText(`${itemMock.title}`)).toHaveAttribute(`src`,`${itemMock.pic}`);
  expect(screen.getByRole(`heading`,`${itemMock.title}`)).toBeInTheDocument();
  expect(screen.getByText(`${itemMock.description}`)).toBeInTheDocument();
>>>>>>> ea4ca75a693b1d3b4b9d2f8ab08ae084623573b4
  expect(screen.getByRole(`button`, {name: `Add`})).toBeInTheDocument();
});

it(`clicks an add button and notifies added item`,()=>{
<<<<<<< HEAD
  render(<ItemPanel item={item} addCart={setMock}/>);

||||||| 318ac63e
  render(
    <MemoryRouter>
      <Routes>
        <Route path='/item' element={<ItemPanel info={details} setCart={setMock}/>}/>
        <Route path='/' element={<App/>}/>
      </Routes>
    </MemoryRouter>);

  fireEvent.click(screen.getByAltText(`Reaper`));
=======
  render(<ItemPanel item={itemMock} setCart={setMock} isModalOpen={true} setIsModalOpen={clickOutMock}/>);

>>>>>>> ea4ca75a693b1d3b4b9d2f8ab08ae084623573b4
  fireEvent.click(screen.getByRole(`button`, {name: `Add`}));

  expect(screen.getByText(`Item added to cart`)).toBeInTheDocument(); 
  expect(setMock).toBeCalled();
  expect(screen.queryByRole(`button`, {name: `Add`})).toBeNull();
});

it(`clicks X button to return to main`, ()=>{
<<<<<<< HEAD
  render(<ItemPanel item={item} addCart={setMock}/>);
  
  fireEvent.click(screen.getByRole(`button`, {name:`X`}))
  expect(screen.queryByText(`X`)).not.toBeInTheDocument();
  
||||||| 318ac63e
  render(
    <MemoryRouter initialEntries={['/item']}>
      <Routes>
        <Route path='/item' element={<ItemPanel info={details} setCart={setMock}/>}/>
        <Route path='/' element={<App/>}/>
      </Routes>
    </MemoryRouter>
  );

  fireEvent.click(screen.getByText(`X`));

  expect(screen.getByText(`VST shop`)).toBeInTheDocument();
  
=======
  render(<ItemPanel item={itemMock} setCart={setMock} isModalOpen={true} setIsModalOpen={clickOutMock}/>);

  fireEvent.click(screen.getByRole(`button`, {name: `X`}));

  expect(screen.queryByRole(`button`, {name: `Add`})).toBeNull();
  expect(screen.queryByRole(`button`, {name: `X`})).toBeNull();
>>>>>>> ea4ca75a693b1d3b4b9d2f8ab08ae084623573b4
});

